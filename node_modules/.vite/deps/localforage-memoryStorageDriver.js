import {
  init_shim
} from "./chunk-VETBGRT7.js";

// node_modules/localforage-memoryStorageDriver/dist/localforage-memoryStorageDriver.es6.js
init_shim();
function getSerializerPromise(localForageInstance) {
  if (getSerializerPromise.result) {
    return getSerializerPromise.result;
  }
  if (!localForageInstance || typeof localForageInstance.getSerializer !== "function") {
    Promise.reject(new Error("localforage.getSerializer() was not available! localforage v1.4+ is required!"));
  }
  getSerializerPromise.result = localForageInstance.getSerializer();
  return getSerializerPromise.result;
}
function executeCallback(promise, callback) {
  if (callback) {
    promise.then(function(result) {
      callback(null, result);
    }, function(error) {
      callback(error);
    });
  }
}
var storageRepository = {};
function _initStorage(options) {
  var self = this;
  var dbInfo = {};
  if (options) {
    for (var i in options) {
      dbInfo[i] = options[i];
    }
  }
  var database = storageRepository[dbInfo.name] = storageRepository[dbInfo.name] || {};
  var table = database[dbInfo.storeName] = database[dbInfo.storeName] || {};
  dbInfo.db = table;
  self._dbInfo = dbInfo;
  return getSerializerPromise(self).then(function(serializer) {
    dbInfo.serializer = serializer;
  });
}
function clear(callback) {
  var self = this;
  var promise = self.ready().then(function() {
    var db = self._dbInfo.db;
    for (var key2 in db) {
      if (db.hasOwnProperty(key2)) {
        delete db[key2];
      }
    }
  });
  executeCallback(promise, callback);
  return promise;
}
function getItem(key2, callback) {
  var self = this;
  if (typeof key2 !== "string") {
    console.warn(key2 + " used as a key, but it is not a string.");
    key2 = String(key2);
  }
  var promise = self.ready().then(function() {
    var db = self._dbInfo.db;
    var result = db[key2];
    if (result) {
      result = self._dbInfo.serializer.deserialize(result);
    }
    return result;
  });
  executeCallback(promise, callback);
  return promise;
}
function iterate(iterator, callback) {
  var self = this;
  var promise = self.ready().then(function() {
    var db = self._dbInfo.db;
    var iterationNumber = 1;
    for (var key2 in db) {
      if (db.hasOwnProperty(key2)) {
        var value = db[key2];
        if (value) {
          value = self._dbInfo.serializer.deserialize(value);
        }
        value = iterator(value, key2, iterationNumber++);
        if (value !== void 0) {
          return value;
        }
      }
    }
  });
  executeCallback(promise, callback);
  return promise;
}
function key(n, callback) {
  var self = this;
  var promise = self.ready().then(function() {
    var db = self._dbInfo.db;
    var result = null;
    var index = 0;
    for (var key2 in db) {
      if (db.hasOwnProperty(key2)) {
        if (n === index) {
          result = key2;
          break;
        }
        index++;
      }
    }
    return result;
  });
  executeCallback(promise, callback);
  return promise;
}
function keys(callback) {
  var self = this;
  var promise = self.ready().then(function() {
    var db = self._dbInfo.db;
    var keys2 = [];
    for (var key2 in db) {
      if (db.hasOwnProperty(key2)) {
        keys2.push(key2);
      }
    }
    return keys2;
  });
  executeCallback(promise, callback);
  return promise;
}
function length(callback) {
  var self = this;
  var promise = self.keys().then(function(keys2) {
    return keys2.length;
  });
  executeCallback(promise, callback);
  return promise;
}
function removeItem(key2, callback) {
  var self = this;
  if (typeof key2 !== "string") {
    console.warn(key2 + " used as a key, but it is not a string.");
    key2 = String(key2);
  }
  var promise = self.ready().then(function() {
    var db = self._dbInfo.db;
    if (db.hasOwnProperty(key2)) {
      delete db[key2];
    }
  });
  executeCallback(promise, callback);
  return promise;
}
function setItem(key2, value, callback) {
  var self = this;
  if (typeof key2 !== "string") {
    console.warn(key2 + " used as a key, but it is not a string.");
    key2 = String(key2);
  }
  var promise = self.ready().then(function() {
    if (value === void 0) {
      value = null;
    }
    var originalValue = value;
    function serializeAsync(value2) {
      return new Promise(function(resolve, reject) {
        self._dbInfo.serializer.serialize(value2, function(value3, error) {
          if (error) {
            reject(error);
          } else {
            resolve(value3);
          }
        });
      });
    }
    return serializeAsync(value).then(function(value2) {
      var db = self._dbInfo.db;
      db[key2] = value2;
      return originalValue;
    });
  });
  executeCallback(promise, callback);
  return promise;
}
var memoryStorageDriver = {
  _driver: "memoryStorageDriver",
  _initStorage,
  iterate,
  getItem,
  setItem,
  removeItem,
  clear,
  length,
  key,
  keys
};
var localforage_memoryStorageDriver_es6_default = memoryStorageDriver;
export {
  localforage_memoryStorageDriver_es6_default as default
};
//# sourceMappingURL=localforage-memoryStorageDriver.js.map
