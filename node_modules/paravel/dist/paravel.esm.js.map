{
  "version": 3,
  "sources": ["../src/util/EventBus.ts", "../src/util/Deferred.ts", "../src/util/Socket.ts", "../src/Executor.ts", "../src/Plex.ts", "../src/Pool.ts", "../src/Relay.ts", "../src/Relays.ts"],
  "sourcesContent": ["export type EventBusHandler = (...args: any[]) => void\n\nexport class EventBus {\n  static ANY = Math.random().toString().slice(2)\n  listeners: Record<string, Array<EventBusHandler>> = {}\n  addListener(name: string, handler: EventBusHandler) {\n    this.listeners[name] = this.listeners[name] || ([] as Array<EventBusHandler>)\n    this.listeners[name].push(handler)\n\n    return () => this.removeListener(name, handler)\n  }\n  addListeners(config: Record<string, EventBusHandler>) {\n    const callbacks = [] as Array<() => void>\n    for (const [name, handler] of Object.entries(config)) {\n      callbacks.push(this.addListener(name, handler))\n    }\n\n    return () => callbacks.forEach(unsubscribe => unsubscribe())\n  }\n  removeListener(name: string, handler: EventBusHandler) {\n    this.listeners[name] = (this.listeners[name] || []).filter(h => h !== handler)\n  }\n  clear() {\n    this.listeners = {}\n  }\n  emit(k: string, ...payload: any) {\n    for (const handler of this.listeners[k] || []) {\n      handler(...payload)\n    }\n\n    for (const handler of this.listeners[EventBus.ANY] || []) {\n      handler(k, ...payload)\n    }\n  }\n}\n", "export type Deferred<T> = Promise<T> & {\n  resolve: (arg: T) => void\n  reject: (arg: T) => void\n}\n\nexport const defer = (): Deferred<any> => {\n  let resolve, reject\n  const p = new Promise((resolve_, reject_) => {\n    resolve = resolve_\n    reject = reject_\n  })\n\n  return Object.assign(p, {resolve, reject}) as any\n}\n", "import WebSocket from \"isomorphic-ws\"\nimport {EventBus} from \"./EventBus\"\nimport {Deferred, defer} from \"./Deferred\"\n\nexport class Socket {\n  ws?: WebSocket\n  url: string\n  ready: Deferred<void>\n  timeout?: NodeJS.Timeout\n  queue: string[]\n  bus: EventBus\n  status: string\n  error?: Error\n  _onOpen: (e: any) => void\n  _onMessage: (e: any) => void\n  _onError: (e: any) => void\n  _onClose: (e: any) => void\n  static STATUS = {\n    NEW: \"new\",\n    PENDING: \"pending\",\n    CLOSED: \"closed\",\n    READY: \"ready\",\n  }\n  constructor(url: string) {\n    this.url = url\n    this.ready = defer()\n    this.queue = []\n    this.bus = new EventBus()\n    this.status = Socket.STATUS.NEW\n\n    this._onOpen = () => {\n      this.error = undefined\n      this.status = Socket.STATUS.READY\n      this.ready.resolve()\n      this.bus.emit('open')\n    }\n\n    this._onMessage = event => {\n      this.queue.push(event.data as string)\n\n      if (!this.timeout) {\n        this.handleMessagesAsync()\n      }\n    }\n\n    this._onError = (error: Error) => {\n      this.error = error\n      this.bus.emit('error', error)\n    }\n\n    this._onClose = () => {\n      this.disconnect()\n      this.ready.reject()\n      this.status = Socket.STATUS.CLOSED\n      this.bus.emit('close')\n    }\n  }\n  async connect() {\n    if ([Socket.STATUS.NEW, Socket.STATUS.CLOSED].includes(this.status)) {\n      if (this.ws) {\n        console.error(\"Attempted to connect when already connected\", this)\n      }\n\n      this.ready = defer()\n      this.ws = new WebSocket(this.url)\n      this.status = Socket.STATUS.PENDING\n\n      this.ws.addEventListener(\"open\", this._onOpen)\n      this.ws.addEventListener(\"message\", this._onMessage)\n      this.ws.addEventListener(\"error\", this._onError)\n      this.ws.addEventListener(\"close\", this._onClose)\n    }\n\n    await this.ready.catch(() => null)\n  }\n  disconnect() {\n    if (this.ws) {\n      const ws = this.ws\n\n      // Avoid \"WebSocket was closed before the connection was established\"\n      this.ready.then(() => ws.close(), () => null)\n\n      this.ws.removeEventListener(\"open\", this._onOpen)\n      this.ws.removeEventListener(\"message\", this._onMessage)\n      this.ws.removeEventListener(\"error\", this._onError)\n      this.ws.removeEventListener(\"close\", this._onClose)\n      this.ws = undefined\n    }\n  }\n  cleanup() {\n    this.disconnect()\n    this.bus.clear()\n  }\n  handleMessages() {\n    for (const json of this.queue.splice(0, 10)) {\n      let message\n      try {\n        message = JSON.parse(json)\n      } catch (e) {\n        continue\n      }\n\n      this.bus.emit('message', this.url, message)\n    }\n\n    if (this.queue.length > 0) {\n      this.handleMessagesAsync()\n    } else {\n      this.timeout = undefined\n    }\n  }\n  handleMessagesAsync() {\n    this.timeout = setTimeout(() => this.handleMessages(), 10) as NodeJS.Timeout\n  }\n  send(message: any) {\n    if (this.status === Socket.STATUS.READY) {\n      if (this.ws?.readyState !== 1) {\n        console.warn(\"Send attempted before socket was ready\", this)\n      }\n\n      this.ws?.send(JSON.stringify(message))\n    }\n  }\n}\n", "import type {EventBus} from './util/EventBus.ts'\n\nconst createFilterId = filters =>\n  [Math.random().toString().slice(2, 6), filters.map(describeFilter).join(\":\")].join(\"-\")\n\nconst describeFilter = ({kinds = [], ...filter}) => {\n  const parts = []\n\n  parts.push(kinds.join(\",\"))\n\n  for (const [key, value] of Object.entries(filter)) {\n    if (value instanceof Array) {\n      parts.push(`${key}[${value.length}]`)\n    } else {\n      parts.push(key)\n    }\n  }\n\n  return \"(\" + parts.join(\",\") + \")\"\n}\n\ntype Executable = {\n  bus: EventBus\n  send: (verb: string, ...args) => void\n}\n\nexport class Executor {\n  target: Executable\n  constructor(target) {\n    this.target = target\n  }\n  subscribe(filters, {onEvent, onEose}) {\n    const id = createFilterId(filters)\n    const unsubscribe = this.target.bus.addListeners({\n      EVENT: (url, subid, e) => subid === id && onEvent?.(url, e),\n      EOSE: (url, subid) => subid === id && onEose?.(url),\n    })\n\n    this.target.send(\"REQ\", id, ...filters)\n\n    return {\n      unsubscribe: () => {\n        this.target.send(\"CLOSE\", id)\n\n        unsubscribe()\n      },\n    }\n  }\n  publish(event, {onOk, onError}) {\n    const unsubscribe = this.target.bus.addListeners({\n      OK: (url, id, ...payload) => id === event.id && onOk(url, ...payload),\n      ERROR: (url, id, ...payload) => id === event.id && onError(url, ...payload),\n    })\n\n    this.target.send(\"EVENT\", event)\n\n    return {unsubscribe}\n  }\n  count(filters, {onCount}) {\n    const id = createFilterId(filters)\n    const unsubscribe = this.target.bus.addListeners({\n      COUNT: (url, subid, ...payload) => {\n        if (subid === id) {\n          onCount(url, ...payload)\n          unsubscribe()\n        }\n      }\n    })\n\n    this.target.send(\"COUNT\", id, ...filters)\n\n    return {unsubscribe}\n  }\n  handleAuth({onAuth, onOk}) {\n    let event\n\n    const unsubscribe = this.target.bus.addListeners({\n      AUTH: async (url, challenge) => {\n        event = await onAuth(url, challenge)\n      },\n      OK: (url, id, ok, message) => {\n        if (id === event?.id) {\n          event = null\n          onOk(url, id, ok, message)\n        }\n      }\n    })\n\n    return {unsubscribe}\n  }\n}\n", "import {EventBus} from \"./util/EventBus\"\n\nexport class Plex {\n  constructor(urls, socket) {\n    this.urls = urls\n    this.socket = socket\n    this.bus = new EventBus()\n    this.unsubscribe = socket.bus.addListeners({\n      message: (websocketUrl, [{relays}, [verb, ...payload]]) => {\n        this.bus.emit(verb, relays[0], ...payload)\n      },\n    })\n  }\n  async send(...payload) {\n    await this.socket.connect()\n\n    this.socket.send([{relays: this.urls}, payload])\n  }\n  cleanup() {\n    this.bus.clear()\n    this.unsubscribe()\n  }\n}\n", "import {Socket} from \"./util/Socket\"\nimport {EventBus} from \"./util/EventBus\"\n\nexport class Pool {\n  data: Map<string, Socket>\n  constructor() {\n    this.data = new Map()\n    this.bus = new EventBus()\n  }\n  has(url) {\n    return this.data.has(url)\n  }\n  get(url) {\n    if (!this.data.has(url)) {\n      const socket = new Socket(url)\n\n      this.data.set(url, socket)\n      this.bus.emit('init', {url})\n\n      socket.bus.addListeners({\n        open: () => this.bus.emit('open', {url}),\n        close: () => this.bus.emit('close', {url}),\n      })\n    }\n\n    return this.data.get(url)\n  }\n  remove(url) {\n    const socket = this.data.get(url)\n\n    if (socket) {\n      socket.cleanup()\n      this.data.delete(url)\n    }\n  }\n  clear() {\n    for (const url of this.data.keys()) {\n      this.remove(url)\n    }\n  }\n}\n", "import {EventBus} from \"./util/EventBus\"\n\nexport class Relay {\n  constructor(socket) {\n    this.socket = socket\n    this.bus = new EventBus()\n    this.listeners = sockets.map(socket => {\n      return socket.bus.addListener('message', (url, [verb, ...payload]) => {\n        this.bus.emit(verb, url, ...payload)\n      })\n    })\n  }\n  async send(...payload) {\n    await this.socket.connect()\n\n    this.socket.send(payload)\n  }\n  cleanup() {\n    this.bus.clear()\n    this.listeners.map(unsubscribe => unsubscribe())\n  }\n}\n", "import {Socket} from './util/Socket'\nimport {EventBus} from './util/EventBus'\n\nexport class Relays {\n  sockets: Socket[]\n  bus: EventBus\n  constructor(sockets) {\n    this.sockets = sockets\n    this.bus = new EventBus()\n    this.listeners = sockets.map(socket => {\n      return socket.bus.addListener('message', (url, [verb, ...payload]) => {\n        this.bus.emit(verb, url, ...payload)\n      })\n    })\n  }\n  send(...payload) {\n    this.sockets.forEach(async socket => {\n      await socket.connect()\n\n      socket.send(payload)\n    })\n  }\n  cleanup() {\n    this.bus.clear()\n    this.listeners.map(unsubscribe => unsubscribe())\n  }\n}\n"],
  "mappings": "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",
  "names": ["socket", "sockets"]
}
